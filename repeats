#!/usr/bin/env python
"""
Prints paths of identical files to stdout, separated by tab (\t).

How it works
------------
The script calculates the MD5 checksums of all the files of the same size
underneath the base path I use as my argument. If these MD5s match, the path
is printed.

How to use it
-------------
### List identical pictures in my album.
    $ ./repeats ~/album
        ~/album/_import/IMG_0034.JPG	~/album/my-trip/IMG_0034.JPG
"""
import hashlib
import os
import os.path
import sys
from collections import defaultdict
from multiprocessing import Pool


DELIMINATOR = "\t"


def main(where):
    for line in repeats(where):
        print(line)


def group_by(iterable, keyfunc):
    groups = defaultdict(list)
    for iterated in iterable:
        result = keyfunc(iterated)
        groups[result].append(iterated)
    return groups


def by_size(candidates):
    groups = group_by(candidates, os.path.getsize)
    return groups.values()


def by_md5(candidates):
    groups = group_by(candidates, calculate_md5)
    return groups.values()


def get_all_files(where):
    filerecords = os.walk(where)
    for dirpath, dirnames, filenames in filerecords:
        for name in filenames:
            yield os.path.join(dirpath, name)


def repeats(where):
    limiters = [by_size, by_md5]
    all_files = list(get_all_files(where))
    possible_matches = [all_files]
    for limiter in limiters:
        next_matches = []
        for possible_match in possible_matches:
            new_elements = limiter(possible_match)
            for element in new_elements:
                if len(element) > 1:
                    next_matches.append(element)
        possible_matches = next_matches
    groups = possible_matches
    for same_list in groups:
        yield(DELIMINATOR.join(same_list))


def calculate_md5(path):
    """
    Returns the MD5 hash for a file at ``path``.
    """
    md5 = hashlib.md5()
    with open(path) as openfile:
        while True:
            buf = openfile.read(128)
            if not buf:
                break
            md5.update(buf)
    return md5.hexdigest()


def get_files_by_size(where):
    """
    Walks ``where`` and groups files by size.
    """
    files_by_size = defaultdict(list)
    filerecords = os.walk(where)
    for dirpath, dirnames, filenames in filerecords:
        for name in filenames:
            relative_path = os.path.join(dirpath, name)
            size = os.path.getsize(relative_path)
            files_by_size[size].append(relative_path)
    return files_by_size


if __name__ == "__main__":
    try:
        where = sys.argv[1]
    except IndexError:
        where = "./"
    main(where)
